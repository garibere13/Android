package com.daily.selfie.dailyselfieapp;import android.app.AlarmManager;import android.app.PendingIntent;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.provider.MediaStore;import android.support.v4.content.FileProvider;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.widget.ImageView;import android.widget.ListView;import android.widget.Toast;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Calendar;import java.util.List;public class MainActivity extends AppCompatActivity {        private static final int REQUEST_TAKE_PHOTO = 2;    private List<Bitmap> bmpList = new ArrayList<Bitmap>();    private final ViewHolder viewHolder = new ViewHolder();    private com.daily.selfie.dailyselfieapp.Photo_Adapter photoAdapter;    private String fullName;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        this.viewHolder.listView = findViewById(R.id.listPhoto);        this.viewHolder.imageView = findViewById(R.id.image_photo);        MontarPhoto();        // set alarm time to 12pm        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.HOUR_OF_DAY, 12);        calendar.set(Calendar.MINUTE, 0);        calendar.set(Calendar.SECOND, 0);        Intent intent1 = new Intent(MainActivity.this, Alarm_Receiver.class);        PendingIntent pendingIntent = PendingIntent.getBroadcast(                MainActivity.this, 0,intent1, 0);        AlarmManager am = (AlarmManager) MainActivity.this.getSystemService(                MainActivity.this.ALARM_SERVICE);        am.setRepeating(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(),                AlarmManager.INTERVAL_DAY, pendingIntent);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    public void PhotoClick(MenuItem item) {        if (!com.daily.selfie.dailyselfieapp.Permition.hasCameraPermission(this)){            com.daily.selfie.dailyselfieapp.Permition.asksCameraPermission(this);        } else {            dispatchTrackPhoto();        }    }    private void dispatchTrackPhoto() {        Intent take = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);        if (take.resolveActivity(getPackageManager()) != null)        {            File photoFile = null;            try{                photoFile = com.daily.selfie.dailyselfieapp.Photo_Ticker.createImageFile(this);                this.viewHolder.mUriPhotoPath = Uri.fromFile(photoFile);            } catch (IOException e) {                Toast.makeText(this, "No se ha podido iniciar la cÃ¡mara", Toast.LENGTH_SHORT).show();            }            if (photoFile != null)            {                take.putExtra(MediaStore.EXTRA_OUTPUT, FileProvider.getUriForFile(this, BuildConfig.APPLICATION_ID + ".provider", photoFile));                startActivityForResult(take, REQUEST_TAKE_PHOTO);            }        }            }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        if (requestCode == REQUEST_TAKE_PHOTO && resultCode == RESULT_OK)        {            this.setPhotoAsList();        }    }    private void setPhotoAsList() {        BitmapFactory.Options bmOptions = new BitmapFactory.Options();        bmOptions.inJustDecodeBounds = true;        BitmapFactory.decodeFile(this.viewHolder.mUriPhotoPath.getPath(), bmOptions);        int photoW = bmOptions.outWidth;        int photoH = bmOptions.outHeight;        int scaleFactor = Math.min(photoW / 200, photoH / 100);        bmOptions.inJustDecodeBounds = false;        bmOptions.inSampleSize = scaleFactor;        bmpList.add(BitmapFactory.decodeFile(this.viewHolder.mUriPhotoPath.getPath(), bmOptions));        fullName = this.viewHolder.mUriPhotoPath.getPath();        MontarPhoto();    }    private void MontarPhoto() {        if (bmpList != null && !bmpList.isEmpty()) {            photoAdapter = new com.daily.selfie.dailyselfieapp.Photo_Adapter(this, bmpList, fullName);            this.viewHolder.listView.setAdapter(photoAdapter);        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        if(requestCode == com.daily.selfie.dailyselfieapp.Permition.CAMERA_PERMISSION)        {            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)            {                dispatchTrackPhoto();            }            else {                new AlertDialog.Builder(this)                        .setMessage(R.string.without_permission_camera_explanation)                        .setPositiveButton(R.string.btn_ok, new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        }).show();            }        }    }    private static class ViewHolder {        Uri mUriPhotoPath;        ListView listView;        ImageView imageView;    }}