package com.marcosapps.mgotado.dailyselfieapp.utils;import android.content.Context;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.media.ExifInterface;import android.net.Uri;import android.os.Environment;import android.view.ViewGroup;import android.widget.ImageView;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;public class UtilsPhotoTicker {//    public static int calculateInSampleSize(//            BitmapFactory.Options options, int reqWidth, int reqHeight) {//        // Raw height and width of image//        final int height = options.outHeight;//        final int width = options.outWidth;//        int inSampleSize = 1;////        if (height > reqHeight || width > reqWidth) {////            final int halfHeight = height / 2;//            final int halfWidth = width / 2;////            // Calculate the largest inSampleSize value that is a power of 2 and keeps both//            // height and width larger than the requested height and width.//            while ((halfHeight / inSampleSize) >= reqHeight//                    && (halfWidth / inSampleSize) >= reqWidth) {//                inSampleSize *= 2;//            }//        }////        return inSampleSize;//    }    public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,                                                         int reqWidth, int reqHeight) {        // First decode with inJustDecodeBounds=true to check dimensions        final BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        BitmapFactory.decodeResource(res, resId, options);        // Calculate inSampleSize        //options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);        // Decode bitmap with inSampleSize set        options.inJustDecodeBounds = false;        return BitmapFactory.decodeResource(res, resId, options);    }//    public static void handleZoomIn(ImageView mImageSelected) {//        if (mImageSelected.getWidth() > 800)//            return;////        ViewGroup.LayoutParams param = mImageSelected.getLayoutParams();//        param.width = (int) (mImageSelected.getWidth() + (mImageSelected.getWidth() * 0.1));//        param.height = (int) (mImageSelected.getHeight() + (mImageSelected.getHeight() * 0.1));//        mImageSelected.setLayoutParams(param);//    }//    public static void handleZoomOut(ImageView mImageSelected) {//        if (mImageSelected.getWidth() < 50)//            return;////        ViewGroup.LayoutParams param = mImageSelected.getLayoutParams();//        param.width = (int) (mImageSelected.getWidth() - (mImageSelected.getWidth() * 0.1));//        param.height = (int) (mImageSelected.getHeight() - (mImageSelected.getHeight() * 0.1));//        mImageSelected.setLayoutParams(param);//    }//    public static void handleRotateLeft(ImageView mImageSelected) {//        mImageSelected.setRotation(mImageSelected.getRotation() + 5);//    }////    public static void handleRotateRight(ImageView mImageSelected) {//        mImageSelected.setRotation(mImageSelected.getRotation() - 5);//    }    public static File createImageFile(Context context) throws IOException {        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss_").format(new Date());        String imageFile = timeStamp;        File storDir = context.getExternalFilesDir(Environment.DIRECTORY_PICTURES);        File image = File.createTempFile(imageFile, ".jpg", storDir);        return image;    }//    public static Bitmap rotateImage(Bitmap img, Uri selectImage) {//        ExifInterface exifInterface;////        try{//            exifInterface = new ExifInterface(selectImage.getPath());//            int rotateOrientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);////            switch (rotateOrientation)//            {//                case ExifInterface.ORIENTATION_ROTATE_90://                    return rotateOrientation(img, 90);////                case ExifInterface.ORIENTATION_ROTATE_180://                    return rotateOrientation(img, 180);////                case ExifInterface.ORIENTATION_ROTATE_270://                    return rotateOrientation(img, 270);////                default://                    return img;//            }//        }//        catch (IOException e)//        {//            return img;//        }//    }//    private static Bitmap rotateOrientation(Bitmap img, int i) {//        Matrix matrix = new Matrix();//        matrix.postRotate(i);//        Bitmap rotateImg = Bitmap.createBitmap(img, 0,0, img.getWidth(), img.getHeight(), matrix, false);//        return rotateImg;//    }}